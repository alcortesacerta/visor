package com.saie.listeners;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpSessionAttributeListener;
import javax.servlet.http.HttpSessionBindingEvent;
import javax.servlet.http.HttpSessionEvent;
import javax.servlet.http.HttpSessionListener;

import com.iecisa.sat.saie.vf.integration.service.dto.UsuarioDTO;

public class SessionListener implements HttpSessionListener, HttpSessionAttributeListener {

	@Override
	public void sessionDestroyed(HttpSessionEvent se) {
		UsuarioDTO usuario = (UsuarioDTO)se.getSession().getAttribute("usuario");
		if(usuario != null){
			eliminarSesion(usuario.getRfc(),se.getSession().getServletContext());
		}
	}

	@Override
	public void sessionCreated(HttpSessionEvent se) {}

	@Override
	public void attributeAdded(HttpSessionBindingEvent se) {
		if(se.getName().equals("usuario")){
			List<HttpSession> sesionesActivas = getContextSessions(se.getSession().getServletContext());
			sesionesActivas.add(se.getSession());
			se.getSession().getServletContext().setAttribute("sesionesActivas", sesionesActivas);
		}
	}

	@Override
	public void attributeRemoved(HttpSessionBindingEvent se) {}

	@Override
	public void attributeReplaced(HttpSessionBindingEvent se) {}
	
	public static List<HttpSession> getContextSessions(ServletContext context){
		@SuppressWarnings("unchecked")
		List<HttpSession> sesionesActivas = (List<HttpSession>)context.getAttribute("sesionesActivas");
		if(sesionesActivas == null){
			sesionesActivas = new ArrayList<HttpSession>();
		}
		return sesionesActivas;
	}
	
	public static boolean existeSesion(String rfc, ServletContext context){
		List<HttpSession> sesionesActivas = getContextSessions(context);
		for(HttpSession sesion : sesionesActivas){
			UsuarioDTO usuario = (UsuarioDTO)sesion.getAttribute("usuario");
			if(usuario.getRfc().equals(rfc)){
				return true;
			}
		}
		return false;
	}
	
	public static void eliminarSesion(String rfc, ServletContext context){
		List<HttpSession> sesionesActivas = getContextSessions(context);
		List<HttpSession> sesionesRemover = new ArrayList<HttpSession>(); 
		for(HttpSession sesion : sesionesActivas){
			UsuarioDTO usuario = (UsuarioDTO)sesion.getAttribute("usuario");
			if(usuario.getRfc().equals(rfc)){
				sesionesRemover.add(sesion);
			}
		}
		for(HttpSession sesion : sesionesRemover){
			sesionesActivas.remove(sesion);
			sesion.removeAttribute("usuario");
		}
		context.setAttribute("sesionesActivas", sesionesActivas);
	}
}
