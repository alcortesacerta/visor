package com.saie.servlets;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Enumeration;
import java.util.List;
import java.util.UUID;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.iecisa.sat.saie.audit.AuditManager;
import com.iecisa.sat.saie.audit.dto.AuditEvent;
import com.iecisa.sat.saie.response.ServiceResponse;
import com.iecisa.sat.saie.vf.integration.service.dto.ArchivoDTO;
import com.iecisa.sat.saie.vf.integration.service.dto.BuscarEnrolamientoPorCriteriosDTO;
import com.iecisa.sat.saie.vf.integration.service.dto.CatalogoDuplicidad;
import com.iecisa.sat.saie.vf.integration.service.dto.ControlVersionesDTO;
import com.iecisa.sat.saie.vf.integration.service.dto.DatosDuplicidadDTO;
import com.iecisa.sat.saie.vf.integration.service.dto.DatosEnrolamientoDTO;
import com.iecisa.sat.saie.vf.integration.service.dto.Permisos;
import com.iecisa.sat.saie.vf.integration.service.dto.UsuarioDTO;
import com.iecisa.sat.saie.vf.integration.service.dto.VersionEnrolamientoAdjuntosDTO;
import com.iecisa.sat.saie.vf.integration.service.dto.VersionEnrolamientoGeneralDTO;
import com.iecisa.sat.saie.vf.integration.service.impl.ServiceDuplicidad;
import com.iecisa.sat.saie.vf.integration.service.impl.ServiceEnrolamiento;
import com.saie.listeners.SessionListener;

public class ServiceServlet extends HttpServlet {
	
	private static final long serialVersionUID = 1L;
	
	private ServiceEnrolamiento servicio = new ServiceEnrolamiento();
	private Gson jsonencoder = null;

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp)throws ServletException, IOException {
		String opcion = req.getPathInfo() != null ? req.getPathInfo() : req.getServletPath();
		if(opcion.equals("/busqueda_rfc")){
			buscarRFC(req,resp);
		}else if(opcion.equals("/guarda_tabla_rfc")){
			req.getSession().setAttribute("tabla_rfc", req.getParameter("orden").split(","));
			guardaEstadoTabla(req, resp);
		}else if(opcion.equals("/guarda_tabla_casos")){
			req.getSession().setAttribute("tabla_casos", req.getParameter("orden").split(","));
			guardaEstadoTabla(req, resp);
		}else if(opcion.equals("/guarda_tabla_duplicidad")){
			req.getSession().setAttribute("tabla_hitlist", req.getParameter("orden").split(","));
			guardaEstadoTabla(req, resp);
		}else if(opcion.equals("/guarda_tabla_validar")){
			req.getSession().setAttribute("tabla_validar", req.getParameter("orden").split(","));
			guardaEstadoTabla(req, resp);
		}else if(opcion.equals("/lista_casos")){
			req.setAttribute("catalogo", CatalogoDuplicidad.PD);
			listarCasos(req,resp);
		}else if(opcion.equals("/lista_duplicados")){
			req.setAttribute("catalogo", CatalogoDuplicidad.CD);
			listarCasos(req,resp);
		}else if(opcion.equals("/lista_validar")){
			listarValidaciones(req,resp);
		}else if(opcion.equals("/login")){
			login(req, resp);
		}else if(opcion.equals("/logout")){
			logout(req,resp);
		}else if(opcion.equals("/certificar_documentos")){
			certificarDocumentos(req,resp);
		}else if(opcion.equals("/descargar_adjuntos")){
			descargarAdjuntos(req, resp);
		}else if(opcion.equals("/limpiar_sesion")){
			limpiaSesion(req, resp);
		}else if(opcion.equals("/loginSesion")){
			loginPendiente(req, resp);
		}
	}
	
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		doPost(req, resp);
	}
	
	private void logout(HttpServletRequest req, HttpServletResponse resp)throws ServletException, IOException{
		SessionListener.eliminarSesion(((UsuarioDTO)req.getSession().getAttribute("usuario")).getRfc(), getServletContext());
		req.getSession().invalidate();
		resp.sendRedirect(req.getRequestURL().substring(0, req.getRequestURL().indexOf(":"))+"://serviciosinternos.sat.gob.mx/AGLogout");
		//getServletContext().getRequestDispatcher("/login_error.jsp").forward(req, resp);
	}
	
	@SuppressWarnings("unchecked")
	private void buscarRFC(HttpServletRequest req, HttpServletResponse resp)throws ServletException, IOException{
		List<DatosEnrolamientoDTO> enrolamientoDtos = null;
		if((req.getParameter("rfc") != null && req.getParameter("rfc").equals(req.getSession().getAttribute("buscarfc"))) || 
				(req.getParameter("curp") != null && req.getParameter("curp").equals(req.getSession().getAttribute("buscacurp"))) || 
				(req.getParameter("nombre") != null && req.getParameter("nombre").equals(req.getSession().getAttribute("buscanombre")))){
			enrolamientoDtos = (List<DatosEnrolamientoDTO>)req.getSession().getAttribute("enrolamientoDtoList");
		}else{
			req.getSession().removeAttribute("buscarfc");
			req.getSession().removeAttribute("buscacurp");
			req.getSession().removeAttribute("buscanombre");
			BuscarEnrolamientoPorCriteriosDTO busquedadto = new BuscarEnrolamientoPorCriteriosDTO();
			String amessage = null;
			if(req.getParameter("buscar").equals("rfc")){
				amessage = "VisorBusqueda, RFC, "+req.getParameter("rfc");
				req.getSession().setAttribute("buscarfc", req.getParameter("rfc"));
				busquedadto.setRfc(req.getParameter("rfc"));
			}else if(req.getParameter("buscar").equals("curp")){
				amessage = "VisorBusqueda, CURP, "+req.getParameter("curp");
				req.getSession().setAttribute("buscacurp", req.getParameter("curp"));
				busquedadto.setCurp(req.getParameter("curp"));
			}else if(req.getParameter("buscar").equals("nombre")){
				amessage = "VisorBusqueda, Nombre, "+req.getParameter("nombre");
				req.getSession().setAttribute("buscanombre", req.getParameter("nombre"));
				busquedadto.setNombre(req.getParameter("nombre"));
			}
			UsuarioDTO usuario = (UsuarioDTO)req.getSession().getAttribute("usuario");
			ServiceResponse<List<DatosEnrolamientoDTO>> serviceResponse = servicio.getEnrolamientoPorCriterios(busquedadto, usuario.getPermisos().contains(Permisos.EXPUESTOS));
			
			if(serviceResponse.getCode() == 0){
				AuditEvent aevent = new AuditEvent();
				aevent.setDateTime(new Date());
				aevent.setUser(usuario.getRfc());
				aevent.setIpAddress(usuario.getIp());
				aevent.setMacAddress(usuario.getMac());
				aevent.setMessage(amessage);
				aevent.setUuid(UUID.randomUUID().toString());
				AuditManager.register(aevent);
				
				enrolamientoDtos = serviceResponse.getResult();
				if(enrolamientoDtos.size() > 1){
					List<DatosEnrolamientoDTO> repetidos = new ArrayList<DatosEnrolamientoDTO>();
					for(int i = 0; i < enrolamientoDtos.size(); i++){
						DatosEnrolamientoDTO datosAuxiliar = enrolamientoDtos.get(i);
						for(int j = 0; j < i; j++){
							if(enrolamientoDtos.get(j).getRfc().equals(datosAuxiliar.getRfc())){
								repetidos.add(datosAuxiliar);
							}
						}
					}
					for(int i = 0; i < repetidos.size(); i++){
						enrolamientoDtos.remove(repetidos.get(i));
					}
				}
				
			}
		}
		
		String jsonresponse = "";
		jsonencoder = new GsonBuilder().setDateFormat("dd/MM/yy").create();
		if(enrolamientoDtos != null){
			jsonresponse = "{";
			for(int i = 0; i < enrolamientoDtos.size(); i++){
				if(i != 0){
					jsonresponse += ",";
				}
				jsonresponse += "\"rfc"+i+"\":";
				DatosEnrolamientoDTO contribuyente = enrolamientoDtos.get(i);
				String row = jsonencoder.toJson(contribuyente);
				jsonresponse += row;
			}
			jsonresponse += "}";
		}else{
			System.out.println("error en el servicio");
			jsonresponse = "{\"mensaje\":\"error\"}";
		}
		req.getSession().setAttribute("enrolamientoDtoList", enrolamientoDtos);
		resp.setCharacterEncoding("utf-8");
		resp.setContentType("application/json");
		resp.getWriter().println(jsonresponse);
	}
	
	@SuppressWarnings("unchecked")
	private void listarValidaciones(HttpServletRequest req, HttpServletResponse resp)throws ServletException, IOException{
		UsuarioDTO usuario = (UsuarioDTO)req.getSession().getAttribute("usuario");
		
		ServiceResponse<List<ControlVersionesDTO>> response = servicio.getActualizacionesPendientes();
		List<ControlVersionesDTO> validaciones = (List<ControlVersionesDTO>)getServletContext().getAttribute("validacionesDTO");
		List<ControlVersionesDTO> autorizaciones = (List<ControlVersionesDTO>)getServletContext().getAttribute("autorizacionesDTO");
		String jsonresponse = "";
		jsonencoder = new GsonBuilder().setDateFormat("dd/MM/yy").create();
		
		if(response.getCode() == 0){
			List<ControlVersionesDTO> controldtos = response.getResult();
			for(ControlVersionesDTO control : controldtos){
				if(control.getEstatus() == 3){
					validaciones.add(control);
				}else if(control.getEstatus() == 5){
					autorizaciones.add(control);
				}
			}
		}
		
		List<ControlVersionesDTO> controldtos = new ArrayList<ControlVersionesDTO>();
		ServiceResponse<List<String>> responseUnidadesLocalidad = servicio.getUnidadesLocalidad(usuario.getLocalidad());
		List<String> unidadesLocalidad = responseUnidadesLocalidad.getResult();
		
		if(usuario.getPermisos().contains(Permisos.VALIDAR) && !usuario.getPermisos().contains(Permisos.VALIDA_NACIONAL)){
			for(ControlVersionesDTO validacion : validaciones){
				if(unidadesLocalidad.contains(validacion.getLocalidadEnrolamiento())){
					controldtos.add(validacion);
				}
			}
		}else if(usuario.getPermisos().contains(Permisos.VALIDAR)){
			controldtos.addAll(validaciones);
		}
		if(usuario.getPermisos().contains(Permisos.AUTORIZAR) && !usuario.getPermisos().contains(Permisos.VALIDA_NACIONAL)){
			for(ControlVersionesDTO autorizacion : autorizaciones){
				if(unidadesLocalidad.contains(autorizacion.getLocalidadEnrolamiento())){
					controldtos.add(autorizacion);
				}
			}
		}else if(usuario.getPermisos().contains(Permisos.AUTORIZAR)){
			controldtos.addAll(autorizaciones);
		}
		/*if(usuario.getPermisos().contains(Permisos.VALIDAR) && usuario.getPermisos().contains(Permisos.AUTORIZAR)){
			controldtos.addAll(validaciones);
			controldtos.addAll(autorizaciones);
		}else if(usuario.getPermisos().contains(Permisos.VALIDAR)){
			controldtos.addAll(validaciones);
		}else if(usuario.getPermisos().contains(Permisos.AUTORIZAR)){
			controldtos.addAll(autorizaciones);
		}*/
		
		jsonresponse = jsonencoder.toJson(controldtos);
			
		req.getSession().setAttribute("controlDtoList", controldtos);
		resp.setCharacterEncoding("utf-8");
		resp.setContentType("application/json");
		resp.getWriter().println(jsonresponse);
	}

	private void listarCasos(HttpServletRequest req, HttpServletResponse resp)throws ServletException, IOException{
		ServiceDuplicidad sd = new ServiceDuplicidad();
		ServiceResponse<List<DatosDuplicidadDTO>> response = sd.getListadoDuplicidadPorCriterios();
		
		@SuppressWarnings("unchecked")
		List<DatosDuplicidadDTO> duplicadosdtos = (List<DatosDuplicidadDTO>)getServletContext().getAttribute("duplicadosDTO");
		String jsonresponse = "";
		jsonencoder = new GsonBuilder().setDateFormat("dd/MM/yy").create();
		
		if(response.getCode() == 0){
			duplicadosdtos.addAll(response.getResult());
			getServletContext().setAttribute("duplicadosDTO", duplicadosdtos);
		}else{
			System.out.println("error en el servicio");
		}
		if(duplicadosdtos.size() > 0){
			jsonresponse = jsonencoder.toJson(duplicadosdtos);
		}else{
			jsonresponse = "{\"mensaje\":\"error\"}";
		}
		resp.setCharacterEncoding("utf-8");
		resp.setContentType("application/json");
		resp.getWriter().println(jsonresponse);
	}

	private void login(HttpServletRequest req, HttpServletResponse resp)throws ServletException, IOException{
		String rfccer = "";
		
		if(ServletFileUpload.isMultipartContent(req)){
			DiskFileItemFactory factory = new DiskFileItemFactory();
			factory.setRepository(new File(System.getProperty("java.io.tmpdir")));
			ServletFileUpload upload = new ServletFileUpload(factory);
	        
	        InputStream certificado = null;
	        InputStream llave = null;
	        String pass = "";
	        try {
	            List<FileItem> formItems = upload.parseRequest(req);
	            if (formItems != null && formItems.size() > 0) {
	                for (FileItem item : formItems) {
	                    if (!item.isFormField()) {
	                    	if(item.getName().contains(".cer")){
	                    		certificado = item.getInputStream();
	                    	}else if(item.getName().contains(".key")){
	                    		llave = item.getInputStream();
	                    	}
	                    }else{
	                    	if(item.getFieldName().equals("claveFiel")){
	                    		pass = item.getString();
	                    	}else if(item.getFieldName().equals("usuarioFiel")){
	                    		rfccer = item.getString();
	                    	}
	                    }
	                }
	            }
	            
	            String textoPorFirmar = "ValidacionDeFirma";
	            if(certificado != null && llave != null){
	            	ServiceResponse<String> responseFiel = servicio.validarFirmarFiel(certificado, llave, pass, textoPorFirmar, null);
	            	if(responseFiel.getCode() == -1){
	            		req.setAttribute("mensaje", responseFiel.getMessage());
	            	}else{
	            		rfccer = responseFiel.getMessage();
	            	}
	            }
	            
	        }catch(Exception e){
	        	e.printStackTrace();
	        }
		}
		
		UsuarioDTO usuario = null;
		
		if(req.getAttribute("mensaje") == null){
			//if(true)//sin multiples usuarios para pruebas locales
			if(!SessionListener.existeSesion(rfccer, getServletContext()))//con multiples usuarios
			{
				usuario = new UsuarioDTO(rfccer, req.getRemoteAddr(), "00:00:00:00:00:00", "", rfccer);
				ServiceResponse<UsuarioDTO> result = servicio.autorizaUsuario(usuario);
				
				usuario = result.getResult();
				
				if(usuario != null  && usuario.getPermisos().size() > 0){
					req.getSession().setAttribute("usuario", usuario);
					req.setAttribute("mensaje", "ok");
					
					if(usuario.getTabla_rfc() != null)
						req.getSession().setAttribute("tabla_rfc", usuario.getTabla_rfc());
					if(usuario.getTabla_casos() != null)
						req.getSession().setAttribute("tabla_casos", usuario.getTabla_casos());
					if(usuario.getTabla_hitlist() != null)
						req.getSession().setAttribute("tabla_hitlist", usuario.getTabla_hitlist());
					if(usuario.getTabla_validar() != null)
						req.getSession().setAttribute("tabla_validar", usuario.getTabla_validar());
				}else{
					req.setAttribute("mensaje", "No cuenta con permisos para el aplicativo");
				}
			}else{
				req.getSession().setAttribute("usuarioPendiente", rfccer);
				req.setAttribute("mensaje", "Existe otra sesión activa con este usuario");
				req.setAttribute("login", "pendiente");
			}
		}
		
		if(req.getAttribute("mensaje").equals("ok")){
			getServletContext().getRequestDispatcher("/menu.jsp").forward(req, resp);
		}else{
			getServletContext().getRequestDispatcher("/login.jsp").forward(req, resp);
		}
	}
	
	private void loginPendiente(HttpServletRequest req, HttpServletResponse resp)throws ServletException, IOException{
		UsuarioDTO usuario = (UsuarioDTO)req.getSession().getAttribute("usuarioPendiente");
		req.getSession().removeAttribute("usuarioPendiente");
		
		SessionListener.eliminarSesion(usuario.getRfc(), getServletContext());
		
		ServiceResponse<UsuarioDTO> result = servicio.autorizaUsuario(usuario);
		usuario = result.getResult();
		
		if(usuario != null  && usuario.getPermisos().size() > 0){
			req.getSession().setAttribute("usuario", usuario);
			req.setAttribute("mensaje", "ok");
			
			if(usuario.getTabla_rfc() != null)
				req.getSession().setAttribute("tabla_rfc", usuario.getTabla_rfc());
			if(usuario.getTabla_casos() != null)
				req.getSession().setAttribute("tabla_casos", usuario.getTabla_casos());
			if(usuario.getTabla_hitlist() != null)
				req.getSession().setAttribute("tabla_hitlist", usuario.getTabla_hitlist());
			if(usuario.getTabla_validar() != null)
				req.getSession().setAttribute("tabla_validar", usuario.getTabla_validar());
		}else{
			req.setAttribute("mensaje", "No cuenta con permisos para el aplicativo");
		}
		
		if(req.getAttribute("mensaje").equals("ok")){
			getServletContext().getRequestDispatcher("/menu.jsp").forward(req, resp);
		}else{
			getServletContext().getRequestDispatcher("/login_error.jsp").forward(req, resp);
		}
	}
	
	private void guardaEstadoTabla(HttpServletRequest req, HttpServletResponse resp)throws ServletException, IOException{
		try{
			UsuarioDTO usuario = (UsuarioDTO)req.getSession().getAttribute("usuario");
			String directorio = System.getProperty("USER_PROPERTIES");
			File f = new File(directorio+"/"+usuario.getNombre()+"_orden_tabla.ser");
			FileOutputStream file = new FileOutputStream(f);
			ObjectOutputStream outStream = new ObjectOutputStream(file);
			outStream.writeObject(req.getSession().getAttribute("tabla_rfc"));
			outStream.writeObject(req.getSession().getAttribute("tabla_casos"));
			outStream.writeObject(req.getSession().getAttribute("tabla_hitlist"));
			outStream.writeObject(req.getSession().getAttribute("tabla_validar"));
			outStream.flush();
			outStream.close();
			file.close();
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	private void certificarDocumentos(HttpServletRequest req, HttpServletResponse resp)throws ServletException, IOException{
		DatosEnrolamientoDTO datosdto = (DatosEnrolamientoDTO)req.getSession().getAttribute("enrolamientoDto");
		VersionEnrolamientoGeneralDTO versiondto = (VersionEnrolamientoGeneralDTO)req.getSession().getAttribute("versionEnrolamiento");
		VersionEnrolamientoAdjuntosDTO adjuntosdto = (VersionEnrolamientoAdjuntosDTO)req.getSession().getAttribute("adjuntosDto");
		String ids = req.getParameter("documentos");
		UsuarioDTO usuario = (UsuarioDTO)req.getSession().getAttribute("usuario");
		
		ServiceResponse<ArchivoDTO> response = servicio.getCertificacionDocumentos(datosdto, versiondto, adjuntosdto, ids.split(","),
				req.getParameter("nombrealsc"),req.getParameter("fraccionalsc"),req.getParameter("admin"),req.getParameter("ciudad"),usuario,
				req.getParameter("tipoLeyenda"));
		String jsonresponse;
		resp.setContentType("application/json");
		if(response.getCode() == 0){
			req.getSession().setAttribute("certificacionPDF", response.getResult());
			jsonresponse = "{\"mensaje\":\"ok\"}";
			resp.getWriter().println(jsonresponse);
		}else{
			jsonresponse = "{\"mensaje\":\"error\"}";
			resp.getWriter().println(jsonresponse);
		}
	}
	
	private void descargarAdjuntos(HttpServletRequest req, HttpServletResponse resp)throws ServletException, IOException{
		DatosEnrolamientoDTO datosdto = (DatosEnrolamientoDTO)req.getSession().getAttribute("enrolamientoDto");
		VersionEnrolamientoGeneralDTO versiondto = (VersionEnrolamientoGeneralDTO)req.getSession().getAttribute("versionEnrolamiento");
		VersionEnrolamientoAdjuntosDTO adjuntosdto = (VersionEnrolamientoAdjuntosDTO)req.getSession().getAttribute("adjuntosDto");
		String ids = req.getParameter("adjuntos");
		UsuarioDTO usuario = (UsuarioDTO)req.getSession().getAttribute("usuario");
		
		ServiceResponse<ArchivoDTO> response = servicio.getZipAdjuntos(datosdto, versiondto, adjuntosdto, ids.split(","),req.getParameter("tipo"), usuario);
		
		String jsonresponse;
		resp.setContentType("application/json");
		if(response.getCode() == 0){
			req.getSession().setAttribute("adjuntosZIP", response.getResult());
			jsonresponse = "{\"mensaje\":\"ok\"}";
			resp.getWriter().println(jsonresponse);
		}else{
			jsonresponse = "{\"mensaje\":\"error\"}";
			resp.getWriter().println(jsonresponse);
		}
	}
	
	@SuppressWarnings("unchecked")
	private void limpiaSesion(HttpServletRequest req, HttpServletResponse resp)throws ServletException, IOException{
		String tipo = req.getParameter("tipo");
		HttpSession sesion = req.getSession();
		Enumeration<String> atributos = (Enumeration<String>)req.getSession().getAttributeNames();
		if(tipo != null && tipo.equals("buscar")){
			while(atributos.hasMoreElements()){
				String atributo = atributos.nextElement();
				if(atributo.indexOf("tabla") == 0 || atributo.indexOf("javamelody") == 0 || atributo.equals("usuario") 
						|| atributo.indexOf("busca") == 0 || atributo.equals("enrolamientoDtoList") || atributo.equals("controlDtoList")){
					continue;
				}else{
					sesion.removeAttribute(atributo);
				}
			}
		}else{
			while(atributos.hasMoreElements()){
				String atributo = atributos.nextElement();
				if(atributo.indexOf("tabla") == 0 || atributo.indexOf("javamelody") == 0 || atributo.equals("usuario")){
					continue;
				}else{
					sesion.removeAttribute(atributo);
				}
			}
		}
	}
}
