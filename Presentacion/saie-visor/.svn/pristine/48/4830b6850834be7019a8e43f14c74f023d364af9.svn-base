package com.saie.servlets;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.security.cert.X509Certificate;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.glxn.qrgen.core.image.ImageType;
import net.glxn.qrgen.javase.QRCode;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

import com.iecisa.sat.saie.response.ServiceResponse;
import com.iecisa.sat.saie.vf.integration.service.dto.CatalogoDTO;
import com.iecisa.sat.saie.vf.integration.service.dto.DatosDuplicidadDTO;
import com.iecisa.sat.saie.vf.integration.service.dto.ReporteBiometristaDTO;
import com.iecisa.sat.saie.vf.integration.service.dto.UsuarioDTO;
import com.iecisa.sat.saie.vf.integration.service.impl.ServiceEnrolamiento;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStamper;

public class UploadFile extends HttpServlet {
	
	private static final long serialVersionUID = 1L;

	@SuppressWarnings("unchecked")
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		if(ServletFileUpload.isMultipartContent(req)){
			DiskFileItemFactory factory = new DiskFileItemFactory();
			factory.setRepository(new File(System.getProperty("java.io.tmpdir")));
			
			ServletFileUpload upload = new ServletFileUpload(factory);
	        
			String uploadPath = System.getProperty("SAIE_BIOREPORTES_ROOT");
			String firmaB64 = null;
			InputStream certificado = null;
	        InputStream llave = null;
	        String pass = "";
	        String rfccer = "";
	        String caso = "";
	        String rfc1 = "";
	        String rfc2 = "";
	        String resolucion = "";
	        String observaciones = "";
	        int casoSat = 0; 
	        FileItem archivoTemp = null;
	        
	        try {
	            List<FileItem> formItems = upload.parseRequest(req);
	            
	            if (formItems != null && formItems.size() > 0) {
	                for (FileItem item : formItems) {
	                    if (!item.isFormField()) {
	                    	if(item.getName().contains(".cer")){
	                    		certificado = item.getInputStream();
	                    	}else if(item.getName().contains(".key")){
	                    		llave = item.getInputStream();
	                    	}else{
	                    		archivoTemp = item;
	                    	}
	                    }else{
	                    	if(item.getFieldName().equals("claveFiel")){
	                    		pass = item.getString();
	                    	}else if(item.getFieldName().equals("usuarioFiel")){
	                    		rfccer = item.getString();
	                    	}else if(item.getFieldName().equals("fcaso")){
	                    		caso = item.getString();
	                    	}else if(item.getFieldName().equals("frfc1")){
	                    		rfc1 = item.getString();
	                    	}else if(item.getFieldName().equals("frfc2")){
	                    		rfc2 = item.getString();
	                    	}else if(item.getFieldName().equals("resolucion")){
	                    		resolucion = item.getString();
	                    	}else if(item.getFieldName().equals("observaciones")){
	                    		observaciones = item.getString();
	                    	}else if(item.getFieldName().equals("casoSat")){
	                    		casoSat = Integer.parseInt(item.getString());
	                    	}
	                    }
	                }
	            }
	            
	            UsuarioDTO usuario = (UsuarioDTO)req.getSession().getAttribute("usuario");
	            X509Certificate cer = X509Certificate.getInstance(certificado);
				BigInteger serial = new BigInteger(cer.getSerialNumber().toString());
				SimpleDateFormat sdf = new SimpleDateFormat("YYYY-MM-dd'T'hh:mm:ss");
				String fecha = sdf.format(new Date());
				String curp = cer.getSubjectDN().getName().substring(cer.getSubjectDN().getName().indexOf("SERIALNUMBER=")+13, cer.getSubjectDN().getName().indexOf("SERIALNUMBER=")+31);
				String idsat = "700-001";
				String digestion = null;
				String algoritmo = "SHA-256";
				
				DatosDuplicidadDTO duplicadodto = null;
				List<DatosDuplicidadDTO> duplicadosdtos = (List<DatosDuplicidadDTO>)getServletContext().getAttribute("duplicadosDTO");
				for(DatosDuplicidadDTO duplicadoAuxiliar : duplicadosdtos){
					if(duplicadoAuxiliar.getCaso_numero_caso().equals(caso)){
						duplicadodto = duplicadoAuxiliar;
						if(duplicadodto.getReporte_url() != null && !duplicadodto.getReporte_url().trim().isEmpty()){
							resp.sendRedirect("duplicado_tablas.jsp");
							return;
						}
						break;
					}
				}
	             
	            try (InputStream inputStream = archivoTemp.getInputStream()) {
	     	        MessageDigest digest = MessageDigest.getInstance("SHA-256");
	     	 
	     	        byte[] bytesBuffer = new byte[1024];
	     	        int bytesRead = -1;
	     	 
	     	        while ((bytesRead = inputStream.read(bytesBuffer)) != -1) {
	     	            digest.update(bytesBuffer, 0, bytesRead);
	     	        }
	     	 
	     	        byte[] hashedBytes = digest.digest();
	     	        
	     	        StringBuffer stringBuffer = new StringBuffer();
	     	        for (int i = 0; i < hashedBytes.length; i++) {
	     	            stringBuffer.append(Integer.toString((hashedBytes[i] & 0xff) + 0x100, 16).substring(1));
	     	        }
	     	        digestion = stringBuffer.toString();
	             } catch (NoSuchAlgorithmException | IOException e) {
				    e.printStackTrace();
	             }
	            
	            String textoPorFirmar = "||"+serial + "|" + fecha + "|" + usuario.getRfc() + "|" + curp + "|" + idsat + "|" + caso  + "|"
	            		+ digestion + "|" + algoritmo + "|" + rfc1 + "|" + rfc2 + "|" + duplicadodto.getFecha_enrolamiento().replace(" ", "T") + "|"
	            		+ duplicadodto.getFecha_enrolamiento2().replace(" ", "T") + "|" + duplicadodto.getLocalidad_enrolamiento() + "|" + duplicadodto.getLocalidad_enrolamiento2()
	            		+ "|" + (duplicadodto.getScore().equals("") ? "0" : duplicadodto.getScore()) + "||";
	            if(certificado != null && llave != null){
	            	certificado.reset();
	            	ServiceResponse<String> responseFiel = new ServiceEnrolamiento().validarFirmarFiel(certificado, llave, pass, textoPorFirmar, usuario.getRfc());
	            	if(responseFiel.getCode() == -1){
	            		req.setAttribute("mensaje", responseFiel.getMessage());
	            	}else{
	            		firmaB64 = responseFiel.getResult();
	            	}
	            }
	            System.out.println("cadena: "+textoPorFirmar);
	            System.out.println("firma: "+firmaB64);
		        
		        if(req.getAttribute("mensaje") == null){
		        	 String fileName = caso + "-"+rfc1+"-"+rfc2+".pdf";
					 String filePath = uploadPath + fileName;
		             
					 //Agrega firma a pdf
		             PdfReader pdfr = new PdfReader(archivoTemp.get());
		             PdfStamper pdfs = new PdfStamper(pdfr, new FileOutputStream(filePath));
		             PdfContentByte pdfc = pdfs.getOverContent(pdfr.getNumberOfPages());
		             Rectangle bounds = pdfr.getPageSize(pdfr.getNumberOfPages());
		             //codigo QR a pdf
		             String uuid = UUID.randomUUID().toString();
		 			 ByteArrayOutputStream qr = QRCode.from("http://serviciosinternos.sat.gob.mx/fiel/visor/duplicado_reporte.jsp?casouid="+uuid).to(ImageType.JPG).stream();
		 			 Image img = Image.getInstance(qr.toByteArray());
		 			 img.setAbsolutePosition(bounds.getWidth()-150, 88);
		 			 pdfc.addImage(img);
		             //texto a pdf
					 Font fuente = FontFactory.getFont("Noto-Sans", 8);
					 Font fuenteBold = FontFactory.getFont("Noto-Sans", 8, Font.BOLD);
					  
					 ColumnText ct = new ColumnText(pdfc);
					 String firma = "Cadena original de solicitud:";
					 Phrase texto = new Phrase(firma, fuenteBold);
					 ct.setSimpleColumn(texto, 35, 10, bounds.getWidth()-150, 200, 15, Element.ALIGN_LEFT);
					 ct.go();
					  
				     ct = new ColumnText(pdfc);
					 firma = textoPorFirmar;
					 String firmaAux = firma;
		 			String firmaFinal = "";
		 			int posy = 200-10;
		 			for(int i = firmaAux.length(); i > 0; i--){
		 				if(fuente.getCalculatedBaseFont(true).getWidthPoint(firmaAux.substring(0, i), fuente.getSize()) <= bounds.getWidth()-150 -160){
		 					firmaFinal += firmaAux.substring(0, i);
		 					firmaAux = firmaAux.substring(i);
		 					posy -= 15;
		 					if(i == firmaAux.length()){
		 						break;
		 					}else{
		 						i = firmaAux.length()+1;
		 						firmaFinal += "\n";
		 					}
		 				}
					 }
		 			texto = new Phrase(firmaFinal, fuente);
					 ct.setSimpleColumn(texto, 160, 10, bounds.getWidth()-150, 200, 15, Element.ALIGN_LEFT);
					 ct.go();
					 
					 ct = new ColumnText(pdfc);
					 firma = "Firma digital:";
					 texto = new Phrase(firma, fuenteBold);
					 ct.setSimpleColumn(texto, 35, 10, bounds.getWidth()-150, posy, 15, Element.ALIGN_LEFT);
					 ct.go();
				 	
					 ct = new ColumnText(pdfc);
					 firma = firmaB64;
					 texto = new Phrase(firma, fuente);
					 ct.setSimpleColumn(texto, 160, 10, bounds.getWidth()-150, posy, 15, Element.ALIGN_LEFT);
					 ct.go();
				 	
					 ct = new ColumnText(pdfc);
					 firma = "Código QR para confirmación con SAIE";
					 texto = new Phrase(firma, fuente);
					 ct.setSimpleColumn(texto, bounds.getWidth()-135, 10, bounds.getWidth()-35, 110, 15, Element.ALIGN_CENTER);
					 ct.go();
		 			 
		             pdfs.close();
		             
			         //guardar a la bd
		             List<CatalogoDTO> catalogo = (List<CatalogoDTO>)getServletContext().getAttribute("catalogoTipoResolucion");
		             String resolucionValue = null;
		             System.out.println("resolucion id: " + resolucion);
		             for(CatalogoDTO cat : catalogo){
		            	 if(cat.getId() == Integer.parseInt(resolucion)){
		            		 resolucionValue = cat.getValor();
		            		 break;
		            	 }
		             }
		             catalogo = (List<CatalogoDTO>)getServletContext().getAttribute("catalogoTipoObservacion");
		             String observacionesValue = null;
		             for(CatalogoDTO cat : catalogo){
		            	 if(cat.getId() == Integer.parseInt(observaciones)){
		            		 observacionesValue = cat.getValor();
		            		 break;
		            	 }
		             }
		             ReporteBiometristaDTO reportedto = new ReporteBiometristaDTO(caso, rfc1, rfc2, fileName, rfccer, firmaB64, resolucion, observaciones, resolucionValue, observacionesValue, uuid, textoPorFirmar, casoSat);
		             reportedto.setOperador(usuario.getRfc());
		             ServiceResponse<String> response = new ServiceEnrolamiento().setReporteBiometristaDuplicados(reportedto, usuario, duplicadodto.getEpid());
		             if(response.getCode() == 0){
		            	 req.setAttribute("mensaje", "Reporte subido correctamente");
            			 duplicadodto.setResolucion(resolucionValue);
            			 duplicadodto.setObservaciones(observacionesValue);
            			 duplicadodto.setReporte_url(fileName);
            			 duplicadodto.setIdReporte(uuid);
            			 duplicadodto.setCasoSat(casoSat);
		             }else{
		            	 req.setAttribute("mensaje", "Ocurrió un error en la conexión, por favor inténtalo nuevamente");
		             }
				}
	        }catch(Exception e){
	        	e.printStackTrace();
	        }
	        getServletContext().getRequestDispatcher("/duplicado_tablas.jsp").forward(req, resp);
		}		
	}

	
}
