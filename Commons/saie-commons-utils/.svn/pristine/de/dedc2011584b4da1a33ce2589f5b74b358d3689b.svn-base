package com.iecisa.sat.saie.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.iecisa.sat.saie.audit.dto.DBSaie;
import com.iecisa.sat.saie.audit.dto.DBSaieResult;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

public class DBManagerSaie {

	private static DBManagerSaie instance = null;
	
	private HikariDataSource dataSourceVisor = null;
	private HikariDataSource dataSourceDuplicidad = null;
	private HikariDataSource dataSourceExterna = null;
	
	private DBManagerSaie(){}
	
	private static Connection getConnection(DBSaie db)throws SQLException{
		if(instance == null){
			instance = new DBManagerSaie();
		}
		if(db == DBSaie.VISOR){
			if(instance.dataSourceVisor == null){
				HikariConfig config = new HikariConfig();
				config.setJdbcUrl(System.getProperty("SAIE_JDBC"));
				config.setUsername(System.getProperty("SAIE_DB_USER"));
				config.setPassword(System.getProperty("SAIE_DB_PASS"));
				config.setMaximumPoolSize(Integer.parseInt(System.getProperty("SAIE_DB_MAXPOOLSIZE")));
				config.addDataSourceProperty("cachePrepStmts", "true");
				config.addDataSourceProperty("prepStmtCacheSize", "1");
				config.addDataSourceProperty("prepStmtCacheSqlLimit", "5");
				
				instance.dataSourceVisor = new HikariDataSource(config);
			}
			return instance.dataSourceVisor.getConnection();
		}else if(db == DBSaie.DUPLICIDAD){
			if(instance.dataSourceDuplicidad == null){
				HikariConfig config = new HikariConfig();
				config.setJdbcUrl(System.getProperty("SAIE_DUPLICIDAD_JDBC"));
				config.setUsername(System.getProperty("SAIE_DUPLICIDAD_DB_USER"));
				config.setPassword(System.getProperty("SAIE_DUPLICIDAD_DB_PASS"));
				config.setMaximumPoolSize(Integer.parseInt(System.getProperty("SAIE_DB_MAXPOOLSIZE")));
				config.addDataSourceProperty("cachePrepStmts", "true");
				config.addDataSourceProperty("prepStmtCacheSize", "1");
				config.addDataSourceProperty("prepStmtCacheSqlLimit", "5");
				
				instance.dataSourceDuplicidad = new HikariDataSource(config);
			}
			return instance.dataSourceDuplicidad.getConnection();
		}else{
			if(instance.dataSourceExterna == null){
				HikariConfig config = new HikariConfig();
				config.setJdbcUrl(System.getProperty("SAIE_EXTERNA_JDBC"));
				config.setUsername(System.getProperty("SAIE_EXTERNA_DB_USER"));
				config.setPassword(System.getProperty("SAIE_EXTERNA_DB_PASS"));
				config.setMaximumPoolSize(Integer.parseInt(System.getProperty("SAIE_DB_MAXPOOLSIZE")));
				config.addDataSourceProperty("cachePrepStmts", "true");
				config.addDataSourceProperty("prepStmtCacheSize", "1");
				config.addDataSourceProperty("prepStmtCacheSqlLimit", "5");
				
				instance.dataSourceExterna = new HikariDataSource(config);
			}
			return instance.dataSourceExterna.getConnection();
		}
	}
	
	public static void closePool(){
		if(instance.dataSourceVisor != null){
			instance.dataSourceVisor.close();
			instance.dataSourceVisor = null;
		}
		if(instance.dataSourceDuplicidad != null){
			instance.dataSourceDuplicidad.close();
			instance.dataSourceDuplicidad = null;
		}
		if(instance.dataSourceExterna != null){
			instance.dataSourceExterna.close();
			instance.dataSourceExterna = null;
		}
	}
	
	private static void llenaPreparedStatement(PreparedStatement ps, List<Object> args)throws SQLException{
		if(args != null){
			for(int i = 0; i < args.size(); i++){
				ps.setObject(i+1, args.get(i));
			}
		}
	}
	
	public static DBSaieResult select(String sql,DBSaie db, List<Object> args)throws SQLException{
		try(Connection connection = getConnection(db);
				PreparedStatement ps = connection.prepareStatement(sql);){
			List<Map<String, Object>> resultados = new ArrayList<Map<String,Object>>();
			
			llenaPreparedStatement(ps, args);
			
			if(ps.execute()){
				ResultSet rs = ps.getResultSet();
				
				ResultSetMetaData rsmd = rs.getMetaData();
				
				while(rs.next()){
					Map<String, Object> row = new HashMap<String, Object>();
					for(int i = 1; i <= rsmd.getColumnCount(); i++){
						row.put(rsmd.getColumnName(i), rs.getObject(rsmd.getColumnName(i)) != null ? rs.getObject(rsmd.getColumnName(i)) : "");
					}
					resultados.add(row);
				}
			}
			return new DBSaieResult(resultados);
		}
	}
	
	public static void insertUpdate(String sql, DBSaie db, List<Object> args)throws SQLException{
		try(Connection connection = getConnection(db);
				PreparedStatement ps = connection.prepareStatement(sql);){
			llenaPreparedStatement(ps, args);
			connection.setAutoCommit(false);
			ps.executeUpdate();
			connection.commit();
		}
	}
	
	public static void insertUpdateTransaction(List<String> sql, DBSaie db, List<List<Object>> argsList)throws SQLException{
		Connection connection = null;
		try{
			connection = getConnection(db);
			connection.setAutoCommit(false);
			for(int i = 0; i < sql.size(); i++){
				try(PreparedStatement ps = connection.prepareStatement(sql.get(i))){
					llenaPreparedStatement(ps, argsList.get(i));
					ps.executeUpdate();
				}
			}
			connection.commit();
		}catch(Exception e){
			e.printStackTrace();
			if(connection != null){
				connection.rollback();
			}
		}finally{
			if(connection != null){
				connection.close();
			}
		}
	}
	
	
}
